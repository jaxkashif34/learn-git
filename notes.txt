(SCI = Source Control Icon), (HD = Horizontal Dots)
* : For Main Heading
# : For Sub Heading

************Git for Professionals notes**************
1) Its is a bad thing to change multiple files and push them into remote
2) the smaller the change in git the better it is for future ourselves and other colleagues
3) we can also add some changed part of file into commit and leave the rest part of the 
change for future commit 
HERE IS HOW WE CAN DO THAT (git add -p index.html)
(:hunks are basically different part of the changes in file we can see that by running 
git diff filepath)
what will happened is git will steps through every (patches | hunks | chunk) of the file with us and 
it asks us do you want to add that patch into staging yes | no | edit | skip | others

by doing this we can create a valuable commit for future ourselves and other colleagues

##### Branching Strategies #####

In case of branching git will only provides you the tools of handling the branches 
but won't help you it completely depends on (team size, team structure, many others)

one popular GitFlow is 

A master or main branch which is usually a production branch 
A develop branch which is a staging branch which can be merged into the master branch after testing
A feature branches which are created and merge into the develop


************Pull Request (communicating about and reviewing the code)**************

without the PR you would jump right to merging you code into the main branch
A PR invites reviewers to provide feedback before merging and this exactly a PR made for



************Merge Conflicts**************

1) when they might occur
2) what they actually are
3) How to solve them

conflicts can also happened when rebasing, interactive rebasing, merging, cherry-pick, pull 
and even applying stashes all of these action perform some kind of integrations

Question : when exactly do conflicts occurs?
Answer : most of the time git figures it out on its own!

Warnings: Do NOT use rebase on commits that you've already pushed/shared on a remote repository
Instead, use it for cleaning up your local commit history before merging it into a shared team branch



************Meaning of vertical lines in gutter section**************

so If you notice that on the left hand side of the current opened file in the gutter 
section (right side of line numbers) you can possible see three different colored vertical lines
if line if green its means that new line is add which is not in last commit
if line is shaded blue its means that line is modified
if you see a red > arrow head its mean line is remove which is in last commit
(you can test it by doing your self)

************Inline View Changes**************

we can also see the inline view changes by going into version control icon -> 
(the file you want to see the changes) -> click on three horizontal dots top right side
-> inline View


************Undo Last Commit (git update-ref)**************
there might be a time you commit accidentally or too early and you want to undo it
(TEST line I'm adding too early and commit it also to test the git update-ref with vs code)
SCI -> HD -> commit -> undo last commit


************Rollback to Previous Commit (git update-ref)**************

if we commit several times and want to revert the several commits earlier then we use it

now I'm will add three commits to test how rollback works in vs code
TEST 1st commit
TEST 2st commit
TEST 3st commit

we can rollback commits by continuously doing undo last commit 

************Discard Changes (git clean)**************

git clean: cleans the working tree by recursively removing the files that are not 
under version control and that refer as discarding in vs code

SCI -> (clicked on untracked file) -> Discard Changes


************Git Merge vs Rebase vs Squash**************

Video Reference : https://www.youtube.com/watch?v=0chZFIZLR_0
DiaGram : "./merge-vs-rebase-vs-squash.png"

Git Merge: It connects connect the latest commit of features branch into the main branch by creating
a new commit in the main branch
From Video: It get the latest changes from the main branch and create a new Commit connecting both
main and feature branch just like connecting a two ropes with a knot
From Video

(C0) --> (C1) --> (D) --> (E) --->(new Commit)   ===> Main Branch
           |                        ^
           |                        |
           |------(A) --> (B) --> (C)     ===> feature Branch


Git Rebase : It basically is a linear branch flow it changes the commit history of the main branch
what it does is it connects the features branch to the main branch by by picking the features branch
and connect the the first commit of the feature branch to the latest commit of the main branch
and then the latest commit of the features branch becomes the latest commit of the main branch
From Video: this gives us the straight forward linear commit history


##### My understanding how git rebase works (correct) #####

when we are in features/TNQ-11 and it's base branch is develop and make some 
changes in features/TNQ-11 and then run (git rebase develop) what happened is?
basically git will find the common ancestor commit of features/TNQ-11 and 
develop from there git will temporarily remove the changes from the features/TNQ-11
and apply all the latest changes from the develop branch into the features/TNQ-11 
and on top of that it will again apply al the changes from the features/TNQ-11 
which was removed temporarily before

##### and when exactly conflicts occurs (correct) #####

when git is trying to reapplies the changes of features/TNQ-11 into the 
features/TNQ-11. Which was temporarily removed before applying the changes 
of the develop branch into the features/TNQ-11 after applying the changes 
from develop there might be a chance that we changed the that files which 
was in the latest commit of the develop branch or changed by other developers 
so there git don't knows which changes should apply either the changes from 
the features/TNQ-11 or the remain the same changes that was in the develop 
so there git will pause and generate a conflict


(C0) --> (C1) --> (D) --> (E) -->(A) --> (B) --> (C)  ===> Main Branch
          ^                       ^      ^      ^ 
          |                      /      /      /
          |                     /      /      /
          |                    /      /      /
          |                   /      /      /
          |                  /      /      /
          |                 /       /      /
          |                /        /      /  
          ---------------(A) --> (B) --> (C)     ===> feature Branch


Git Squash (all is from video): Now when we want to integrate the features branch into the main branch we have two options
git-merge but git-merge will create a too many knots which can make the history a bit massy and 
other option is git-rebase by connecting the feature branch to the tip of main branch but by doing this
we change the history
So what happened in Squash merge is it squeeze the features branch commits and creates a 
new commit at the tip of the main branch its kind of hybrid approach


(C0) --> (C1) --> (D) --> (E) -->(new commit)  ===> Main Branch
          ^                       ^        
          |                       |      
          |                       |     
          |                       |    
          |                       |   
          |                       |---------------  
          |                       |-------        |
          |                       |       |       |
          -----------------------(A) --> (B) --> (C)     ===> feature Branch


Question: Professionals steps to do merge, rebase and squash ?
Answer: 1) git fetch origin main-branch
        2) git checkout feature-branch
        3) git rebase main-branch
        4) git push origin features (--force or --force-with-lease "to be safer")
        (git push --force-with-lease will only force push if your local copy of the remote branch is up-to-date)
        
one solution is cherry-pick (will test later) if want the latest code from previous
what are the steps I would follow in future If I face the same scenario again like want code from previous

Question: what is the difference between git fetch and git pull ?
Answer: Both are basically used for integration but the main difference is with git fetch 
        we have choice either use rebase, merge, or squash 
        (GIT-PULL) The main difference is when we run the git pull while we in the same  
        branch as the branch remote branch where we want to fetch the changes then the
        remote changes will directly add into your local working directory
        git pull fetches and merge those changes into your local branch
        (GIT-FETCH) Git Pull will get the changes from the remote same branch (the branch
        we are locally in) and add them into the local repository then we must need to
        run git merge to apply changes so that they can be shown in working directory.
        If you want to fetch changes but not immediately merge them, you can use git fetch
Diagram: "./pull-vs-fetch.png"